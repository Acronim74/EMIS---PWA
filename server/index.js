const auth = require('./auth');
const express = require('express');
const cors = require('cors');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
require('dotenv').config();
const supabase = require('./supabaseClient');

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(cors());
app.use(express.json());

// ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/register', async (req, res) => {
  console.log('–ü—Ä–∏—à–ª–æ –≤ req.body:', req.body);
  const { email, password } = req.body;

  if (!email || !password) {
    return res.status(400).json({ error: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
  }

  try {
    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    const hashedPassword = await bcrypt.hash(password, 10);

    // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase
    const { data, error } = await supabase
      .from('users')
      .insert([{ email, password: hashedPassword, role: 'user' }])
      .select();

    console.log('–û—Ç–≤–µ—Ç Supabase (register):', { data, error });

    if (error || !data || !data[0]) {
      return res.status(400).json({ error: error?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' });
    }

    res.status(200).json({
      message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω',
      user: data[0]
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' });
  }
});

// ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/login', async (req, res) => {
  const { email, password } = req.body;

  if (!email || !password) {
    return res.status(400).json({ error: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
  }

  try {
    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
    const { data, error } = await supabase
      .from('users')
      .select('*')
      .eq('email', email)
      .single();

    console.log('–û—Ç–≤–µ—Ç Supabase (login):', { data, error });

    if (error || !data) {
      return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
    }

    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
    const valid = await bcrypt.compare(password, data.password);
    if (!valid) {
      return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
    const token = jwt.sign(
      { id: data.id, email: data.email, role: data.role },
      process.env.JWT_SECRET,
      { expiresIn: '7d' }
    );

    res.status(200).json({
      message: '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω',
      token,
      user: {
        id: data.id,
        email: data.email,
        role: data.role
      }
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ' });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç /me
app.get('/me', auth, async (req, res) => {
  const { id } = req.user;

  const { data, error } = await supabase
    .from('users')
    .select('id, email, role, created_at')
    .eq('id', id)
    .single();

  if (error || !data) {
    return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }

  res.json({ user: data });
});

app.get('/forms', auth, async (req, res) => {
  const { data, error } = await supabase
    .from('forms')
    .select('id, title, description, order')
    .eq('is_active', true)
    .order('order', { ascending: true });

  if (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ä–º:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç' });
  }

  res.json({ forms: data });
});

app.get('/forms/:id', auth, async (req, res) => {
  const formId = req.params.id;

  // –ü–æ–ª—É—á–∞–µ–º —Å–∞–º—É –∞–Ω–∫–µ—Ç—É
  const { data: form, error: formError } = await supabase
    .from('forms')
    .select('id, title, description, order')
    .eq('id', formId)
    .single();

  if (formError || !form) {
    return res.status(404).json({ error: '–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
  }

  // –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∫ –∞–Ω–∫–µ—Ç–µ
  const { data: questions, error: questionError } = await supabase
    .from('questions')
    .select('id, type, question, options, order')
    .eq('form_id', formId)
    .order('order', { ascending: true });

  if (questionError) {
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤' });
  }

  res.json({
    form,
    questions
  });
});
// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/forms/:id/submit', auth, async (req, res) => {
  const formId = req.params.id;
  const userId = req.user.id;
  const answers = req.body.answers;

  // üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ç–≤–µ—Ç—ã?
  const { data: existingAnswers, error: checkError } = await supabase
    .from('answers')
    .select('id')
    .eq('user_id', userId)
    .eq('form_id', formId)
    .limit(1);

  if (checkError) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–æ–≤:', checkError);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ' });
  }

  if (existingAnswers && existingAnswers.length > 0) {
    return res.status(409).json({ error: '–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ —ç—Ç—É –∞–Ω–∫–µ—Ç—É' });
  }

  if (!Array.isArray(answers) || answers.length === 0) {
    return res.status(400).json({ error: '–°–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ –ø—É—Å—Ç –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' });
  }

  const prepared = answers.map((a) => ({
    user_id: userId,
    form_id: formId,
    question_id: a.question_id,
    answer: a.answer
  }));

  const { data, error } = await supabase
    .from('answers')
    .insert(prepared)
    .select();

  if (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤:', error);
    return res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç—ã' });
  }

  res.status(200).json({ message: '–û—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', count: data.length });
});

app.get('/progress', auth, async (req, res) => {
  const userId = req.user.id;

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ form_id, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –µ—Å—Ç—å –æ—Ç–≤–µ—Ç—ã
  const { data: rawAnswers, error: answerError } = await supabase
    .from('answers')
    .select('form_id')
    .eq('user_id', userId);

  if (answerError) {
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞' });
  }

  // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã form_id
  const formIds = [...new Set(rawAnswers.map(a => a.form_id))];

  if (formIds.length === 0) {
    return res.json({ progress: [] });
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–Ω–∫–µ—Ç—ã –ø–æ —ç—Ç–∏–º ID
  const { data: forms, error: formError } = await supabase
    .from('forms')
    .select('id, title, description')
    .in('id', formIds);

  if (formError) {
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∫–µ—Ç' });
  }

  res.json({ progress: forms });
});


app.get('/my-answers/:form_id', auth, async (req, res) => {
  const formId = req.params.form_id;
  const userId = req.user.id;

  // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —ç—Ç–æ–π –∞–Ω–∫–µ—Ç–µ
  const { data: answers, error } = await supabase
    .from('answers')
    .select('question_id, answer, created_at')
    .eq('user_id', userId)
    .eq('form_id', formId);

  if (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:', error);
    return res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–≤–µ—Ç—ã' });
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
  const { data: questions, error: qError } = await supabase
    .from('questions')
    .select('id, question')
    .eq('form_id', formId);

  if (qError) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤:', qError);
    return res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã' });
  }

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫ —á–∏—Ç–∞–µ–º–æ–º—É –≤–∏–¥—É
  const questionMap = {};
  for (const q of questions) {
    questionMap[q.id] = q.question;
  }

  const structured = answers.map(a => ({
    question: questionMap[a.question_id] || '[–Ω–µ –Ω–∞–π–¥–µ–Ω–æ]',
    answer: a.answer,
    at: a.created_at
  }));

  res.json({ answers: structured });
});

const adminOnly = require('./adminOnly');

app.post('/admin/forms', auth, adminOnly, async (req, res) => {
  const { title, description, order = 0 } = req.body;

  const { data, error } = await supabase
    .from('forms')
    .insert([{ title, description, order, is_active: true }])
    .select();

  if (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–æ—Ä–º—ã:', error);
    return res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–æ—Ä–º—É' });
  }

  res.status(200).json({ message: '–§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∞', form: data[0] });
});

app.post('/admin/forms/:id/questions', auth, adminOnly, async (req, res) => {
  const formId = req.params.id;
  const questions = req.body.questions;

  if (!Array.isArray(questions) || questions.length === 0) {
    return res.status(400).json({ error: '–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è' });
  }

  const toInsert = questions.map((q, i) => ({
    form_id: formId,
    type: q.type,
    question: q.question,
    options: q.options || [],
    order: q.order ?? i
  }));

  const { data, error } = await supabase
    .from('questions')
    .insert(toInsert)
    .select();

  if (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤:', error);
    return res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã' });
  }

  res.status(200).json({ message: '–í–æ–ø—Ä–æ—Å—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã', count: data.length });
});

app.get('/admin/users-progress', auth, adminOnly, async (req, res) => {
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const { data: answers, error } = await supabase
    .from('answers')
    .select('user_id, form_id, created_at');

  if (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
    return res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ' });
  }

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ user_id + form_id
  const progressMap = {};

  for (const ans of answers) {
    const key = `${ans.user_id}_${ans.form_id}`;

    if (!progressMap[key]) {
      progressMap[key] = {
        user_id: ans.user_id,
        form_id: ans.form_id,
        count: 1,
        first_answer: ans.created_at
      };
    } else {
      progressMap[key].count += 1;
      if (ans.created_at < progressMap[key].first_answer) {
        progressMap[key].first_answer = ans.created_at;
      }
    }
  }

  const progressList = Object.values(progressMap);

  // –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const userIds = [...new Set(progressList.map(p => p.user_id))];
  const { data: users } = await supabase
    .from('users')
    .select('id, email')
    .in('id', userIds);

  // –ü–æ–¥–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ä–º—ã
  const formIds = [...new Set(progressList.map(p => p.form_id))];
  const { data: forms } = await supabase
    .from('forms')
    .select('id, title')
    .in('id', formIds);

  // –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
  const result = progressList.map(p => ({
    user_id: p.user_id,
    email: users.find(u => u.id === p.user_id)?.email || '[–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ]',
    form_id: p.form_id,
    form_title: forms.find(f => f.id === p.form_id)?.title || '[–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ]',
    answers_count: p.count,
    first_answer_at: p.first_answer
  }));

  res.json({ progress: result });
});

app.post('/forms/:id/submit', auth, async (req, res) => {
  const formId = req.params.id;
  const { answers } = req.body;

  if (!answers || !Array.isArray(answers)) {
    return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö' });
  }

  const userId = req.user.id;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª?
  const { data: existing } = await supabase
    .from('answers')
    .select('id')
    .eq('form_id', formId)
    .eq('user_id', userId)
    .limit(1);

  if (existing && existing.length > 0) {
    return res.status(400).json({ error: '–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ —ç—Ç—É –∞–Ω–∫–µ—Ç—É' });
  }

  const answersWithUser = answers.map(answer => ({
    ...answer,
    user_id: userId,
    form_id: formId
  }));

  const { data, error } = await supabase
    .from('answers')
    .insert(answersWithUser);

  if (error) {
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤' });
  }

  res.json({ message: '–û—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', data });
});



// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
